<?xml version="1.0" encoding="UTF-8" ?>
<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
             http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd" version="1.0">

<!-- Este archivo contiene la configuración de JPA. Debe colocarse en la carpeta META-INF dentro de src -->

 <!-- Unidad de persistencia: Es una base de datos controlada por JPA. Sus atributos son:
    name: Nombre de la unidad de persistencia. Lo usaremos durante el programa para poder trabajar con ella.
    transaction-type: Es uno de estos:
      * RESOURCE_LOCAL: tenemos un proyecto que empieza de cero.
      * JTA: nuestro proyecto usa un framework que necesita acceder a la unidad de persistencia.
 -->
    <persistence-unit name="LIBRO" transaction-type="RESOURCE_LOCAL">
      <!-- provider: Indica el tipo de ORM sobre el que trabajará JPA -->
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <!-- ahora configuramos el provider seleccionado -->
        <properties>
            <!-- driver JDBC que usará JPA -->
            <property name="connection.driver_class" value="com.mysql.jdbc.Driver"/>
            <!-- cadena de conexión JDBC para que JPA se conecte a la base de datos -->
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/ALUMNOS_DAW"/>
            <!-- variante de SQL que usará JPA para generar las consultas. Valores típicos para MySQL:
              * org.hibernate.dialect.MariaDB53Dialect
              * org.hibernate.dialect.MySQLDialect -->
            <property name="hibernate.dialect" value="org.hibernate.dialect.MariaDB53Dialect"/>
            <!-- indica si JPA deberá crear las tablas de la base de datos o adaptarse a una BD ya hecha
                * create: JPA crea desde cero toda la base de datos (ojo: esto borra cualquier BD ya existente)
                * update: JPA no borra nada, pero modifica la BD según lo crea conveniente (por ejemplo, si necesita crear nuevas tablas)
                * none: JPA no hace nada e intentará adaptarse a las tablas de una BD ya existente
            -->
            <property name="hibernate.hbm2ddl.auto" value="create"/>
            <!-- indica si deberá mostrarse en el output el SQL generado por JPA -->
            <property name="hibernate.show_sql" value="true"/>
            <!-- nombre de usuario para acceder a la BD -->
            <property name="javax.persistence.jdbc.user" value="root"/>
            <!-- contraseña del usuario -->
            <property name="javax.persistence.jdbc.password" value=""/>
        </properties>
    </persistence-unit>
</persistence>
